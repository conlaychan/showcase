<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="User">
    <resultMap id="UserMap" type="User">
        <id column="id" property="id"/>
        <result column="login_id" property="loginId"/>
        <result column="password" property="password"/>
        <result column="type" property="type"/>
        <result column="name" property="name"/>
        <result column="email" property="email"/>
        <result column="mobile" property="mobile"/>
        <result column="birthday" property="birthday"/>
        <result column="update_at" property="updateAt"/>
        <result column="create_at" property="createAt"/>
    </resultMap>

    <sql id="tb">
        `user`
    </sql>

    <!-- 仅业务字段，即除去 id、update_at、 create_at 之后的字段 -->
    <sql id="biz_columns">
        login_id, password, `type`, `name`, email, mobile, birthday
    </sql>

    <sql id="all_columns">
        id,
        <include refid="biz_columns"/>
        , update_at, create_at
    </sql>

    <sql id="biz_values">
        #{loginId}, #{password}, #{type}, #{name}, #{email}, #{mobile}, #{birthday}
    </sql>

    <sql id="criteria">
        <if test="loginId != null">and `login_id` = #{loginId}</if>
        <if test="name != null">and `name` = #{name}</if>
        <if test="email != null">and `email` = #{email}</if>
        <if test="mobile != null">and `mobile` = #{mobile}</if>
        <if test="birthday != null">and birthday = #{birthday}</if>
        <if test="type != null">and `type` = #{type}</if>
        <if test="updateAt != null">AND `update_at` = #{updateAt}</if>
        <if test="createAt != null">AND `create_at` = #{createAt}</if>
        <if test="updateRange != null">
            <if test="updateRange.hasLowerBound()">
                AND `update_at`
                <if test="updateRange.lowerBoundType == 'OPEN'">&gt;</if>
                <if test="updateRange.lowerBoundType == 'CLOSED'">&gt;=</if>
                #{updateRange.lowerEndpoint}
            </if>
            <if test="updateRange.hasUpperBound()">
                AND `update_at`
                <if test="updateRange.upperBoundType == 'OPEN'">&lt;</if>
                <if test="updateRange.upperBoundType == 'CLOSED'">&lt;=</if>
                #{updateRange.upperEndpoint}
            </if>
        </if>
        <if test="createRange != null">
            <if test="createRange.hasLowerBound()">
                AND `create_at`
                <if test="createRange.lowerBoundType == 'OPEN'">&gt;</if>
                <if test="createRange.lowerBoundType == 'CLOSED'">&gt;=</if>
                #{createRange.lowerEndpoint}
            </if>
            <if test="createRange.hasUpperBound()">
                AND `create_at`
                <if test="createRange.upperBoundType == 'OPEN'">&lt;</if>
                <if test="createRange.upperBoundType == 'CLOSED'">&lt;=</if>
                #{createRange.upperEndpoint}
            </if>
        </if>
    </sql>

    <update id="update" parameterType="User">
        UPDATE
        <include refid="tb"/>
        <set>
            <if test="loginId != null">`login_id` = #{loginId},</if>
            <if test="password != null">`password` = #{password},</if>
            <if test="type != null">`type` = #{type},</if>
            <if test="name != null">`name` = #{name},</if>
            <if test="email != null">`email` = #{email},</if>
            <if test="mobile != null">`mobile` = #{mobile},</if>
            <if test="birthday != null">`birthday` = #{birthday},</if>
            <if test="updateAt != null">`update_at` = #{updateAt},</if>
            <if test="updateAt == null">`update_at` = now(),</if>
        </set>
        WHERE id=#{id}
    </update>

    <insert id="creates" parameterType="list" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
        <include refid="tb"/>
        (<include refid="biz_columns"/>, update_at, create_at)
        VALUES
        <foreach collection="list" separator="," item="item">
            (
            #{item.loginId}, #{item.password}, #{item.type}, #{item.name}, #{item.email}, #{item.mobile},
            #{item.birthday},
            <if test="item.updateAt == null">now()</if>
            <if test="item.updateAt != null">#{item.updateAt}</if>
            ,
            <if test="item.createAt == null">now()</if>
            <if test="item.createAt != null">#{item.createAt}</if>
            )
        </foreach>
    </insert>

    <insert id="create" parameterType="User" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
        <include refid="tb"/>
        (<include refid="biz_columns"/>, update_at, create_at)
        VALUES
        (<include refid="biz_values"/>,
        <if test="updateAt == null">now()</if>
        <if test="updateAt != null">#{updateAt}</if>
        ,
        <if test="createAt == null">now()</if>
        <if test="createAt != null">#{createAt}</if>
        )
    </insert>

    <select id="findById" parameterType="long" resultMap="UserMap">
        SELECT
        <include refid="all_columns"/>
        FROM
        <include refid="tb"/>
        WHERE id = #{id}
    </select>

    <select id="findByLoginId" parameterType="string" resultMap="UserMap">
        SELECT
        <include refid="all_columns"/>
        FROM
        <include refid="tb"/>
        WHERE `login_id` = #{loginId}
    </select>

    <select id="findByIds" parameterType="list" resultMap="UserMap">
        SELECT
        <include refid="all_columns"/>
        FROM
        <include refid="tb"/>
        WHERE id IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <delete id="delete" parameterType="long">
        DELETE FROM
        <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <delete id="deletes" parameterType="list">
        DELETE FROM
        <include refid="tb"/>
        WHERE id in
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="count" parameterType="UserCriteria" resultType="long">
        SELECT COUNT(id)
        FROM
        <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" parameterType="UserCriteria" resultMap="UserMap">
        SELECT
        <include refid="all_columns"/>
        FROM
        <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        <if test="orderBy != null">order by ${orderBy}</if>
        LIMIT #{offset}, #{limit}
    </select>

    <select id="list" parameterType="UserCriteria" resultMap="UserMap">
        SELECT
        <include refid="all_columns"/>
        FROM
        <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        <if test="orderBy != null">order by ${orderBy}</if>
    </select>
</mapper>
